(define (btree-empty)
  (cons 0 (cons 0 0)))

(define (btree-null? t)
  (if (pair? (car t))
      #f
      #t))

(define (depth t)
  (if (btree-null? t)
      0
      (+ 1 (max (depth (car (cdr t))) (depth (cdr (cdr t)))))))

(define (balance t)
  (- (depth (car (cdr t))) (depth (cdr (cdr t)))))

(define (rotateR t)
  (cons (car (car (cdr t))) (cons (car (cdr (car (cdr t)))) (cons (car t) (cons (cdr (cdr (car (cdr t)))) (cdr (cdr t)))))))

(define (rotateL t)
  (cons (car (cdr (cdr t))) (cons (cons (car t) (cons (car (cdr t)) (car (cdr (cdr (cdr t)))))) (cdr (cdr (cdr (cdr t)))))))

(define (balance_left t)
  (if (>= (balance (car (cdr t))) 0)
      (rotateR t)
      (rotateR (cons (car t) (cons (rotateL(car (cdr t))) (cdr (cdr t)))))))

(define (balance_right t)
  (if (<= (balance (cdr (cdr t))) 0)
      (rotateL t)
      (rotateL (cons (car t) (cons (car (cdr t)) (rotateR(cdr (cdr t))))))))

(define (update t key val)
  (if (string=? key (car (car t)))
      (cons (cons key val) (cdr t))
      (if (string<? key (car (car t)))
          (cons (car t) (cons (update (car (cdr t)) key val) (cdr (cdr t))))
          (cons (car t) (cons (car (cdr t)) (update (cdr (cdr t) ) key val))))))

(define (btree-insert key val t)
  (if (btree-search key t)
      (update t key val)
      (if (btree-null? t)
          (cons (cons key val) (cons (btree-empty) (btree-empty)))
          (if (and (btree-null? (car(cdr t))) (btree-null? (cdr (cdr t))))
              (if (string>? key (car (car t)))
                  (cons (car t) (cons (btree-empty) (cons(cons key val) (cons (btree-empty)(btree-empty)))))
                  (cons (car t) (cons (cons (cons key val) (cons (btree-empty)(btree-empty))) (btree-empty))))
              (if (string<? key (car (car t)))
                  (if (= 2 (balance (cons (car t) (cons (btree-insert key val (car (cdr t))) (cdr (cdr t))))))
                      (balance_left (cons (car t) (cons (btree-insert key val (car (cdr t))) (cdr (cdr t)))))
                      (cons (car t) (cons (btree-insert key val (car (cdr t))) (cdr (cdr t)))))
                  (if (= -2 (balance (cons (car t) (cons (car (cdr t))(btree-insert key val (cdr (cdr t)))))))
                      (balance_right (cons (car t) (cons (car (cdr t))(btree-insert key val (cdr (cdr t))))))
                      (cons (car t) (cons (car (cdr t))(btree-insert key val (cdr (cdr t)))))))))))

(define (delete-car t)
  (if (btree-null?  (cdr (cdr t)))
      (car  t)
      (delete-car (cdr (cdr t)))))

(define (delete-pre t pre1 pre2 n)
  (if (= n 0)
      (if (btree-null? (cdr (cdr (car (cdr t)))))
          (if (= -2 (balance(cons (car (car (cdr t))) (cons (car (cdr (car (cdr t)))) (cdr (cdr t))))))
              (balance_right (cons (car (car (cdr t))) (cons (car (cdr (car (cdr t)))) (cdr (cdr t)))))
              (cons (car (car (cdr t))) (cons (car (cdr (car (cdr t)))) (cdr (cdr t)))))
          (if (= -2 (balance (cons (delete-car (car (cdr t))) (cons (delete-pre (car (cdr t)) (btree-empty) (btree-empty) 1) (cdr (cdr t))))))
              (balance_right (cons (delete-car (car (cdr t))) (cons (delete-pre (car (cdr t)) (btree-empty) (btree-empty) 1) (cdr (cdr t)))))
              (cons (delete-car (car (cdr t))) (cons (delete-pre (car (cdr t)) (btree-empty) (btree-empty) 1) (cdr (cdr t))))))
      (if (number? (car pre1))
          (if (btree-null? (cdr (cdr (cdr (cdr t)))))
              (if (= 2 (balance (cons (car t) (cons (car (cdr t)) (car ( cdr (cdr (cdr t))))))))
                  (balance_left (cons (car t) (cons (car (cdr t)) (car ( cdr (cdr (cdr t)))))))
                  (cons (car t) (cons (car (cdr t)) (car ( cdr (cdr (cdr t)))))))
              (if (= 2 (balance (delete-pre (cdr (cdr t)) (car t) (car (cdr t)) 1)))
                  (balance_left (delete-pre (cdr (cdr t)) (car t) (car (cdr t)) 1))
                  (delete-pre (cdr (cdr t)) (car t) (car (cdr t)) 1)))
          (if (btree-null? (cdr (cdr (cdr (cdr t)))))
              (if (= 2 (balance (cons pre1 (cons pre2 (cons (car t) (cons (car (cdr t)) (car (cdr (cdr (cdr t))))))))))
                  (balance-left (cons pre1 (cons pre2 (cons (car t) (cons (car (cdr t)) (car (cdr (cdr (cdr t)))))))))
                  (cons pre1 (cons pre2 (cons (car t) (cons (car (cdr t)) (car (cdr (cdr (cdr t)))))))))
              (if (= 2 (balance (cons pre1 (cons pre2 (delete-pre (cdr (cdr t)) (car t) (car (cdr t)) 1)))))
                  (balance-left (cons pre1 (cons pre2 (delete-pre (cdr (cdr t)) (car t) (car (cdr t)) 1))))
                  (cons pre1 (cons pre2 (delete-pre (cdr (cdr t)) (car t) (car (cdr t)) 1))))))))
           
(define (btree-delete key t)
  (if (not (btree-search key t))
      t
      (if (btree-null? t)
          t
          (if (string=? key (car (car t)))
              (if (and (btree-null? (car (cdr t))) (btree-null? (cdr (cdr t))))
                  (btree-empty)
                  (if (btree-null? (car (cdr t)))
                      (cdr (cdr t))
                      (if (btree-null? (cdr (cdr t)))
                          (car (cdr t))
                          (delete-pre t (btree-empty) (btree-empty) 0) )))
              (if (string<? key (car (car t)))
                  (if (= -2 (balance (cons (car t) (cons (btree-delete key (car (cdr t))) (cdr (cdr t))))))
		      (balance_right(cons (car t) (cons (btree-delete key (car (cdr t))) (cdr (cdr t)))))
		      (cons (car t) (cons (btree-delete key (car (cdr t))) (cdr (cdr t)))))
		  (if (= 2 (balance (cons (car t) (cons (car (cdr t)) (btree-delete key (cdr (cdr t)))))))
		      (balance_left (cons (car t) (cons (car (cdr t)) (btree-delete key (cdr (cdr t))))))
                      (cons (car t) (cons (car (cdr t)) (btree-delete key (cdr (cdr t)))))))))))
                      
(define (btree-search key t)
  (if (btree-null? t)
      #f
      (if (string=? key (car (car t)))
          (car t)
          (if (and (btree-null? (car (cdr t))) (btree-null? (cdr (cdr t))))
              #f
              (if (string<? key (car (car t)))
                  (btree-search key (car (cdr t)))
                  (btree-search key (cdr (cdr t))))))))